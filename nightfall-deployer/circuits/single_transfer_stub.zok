struct OldCommitmentPreimage {
	u32[8] id
	u32[8] value
	u32[8] salt
	u32[8] hash
	field ask
}

struct NewCommitmentPreimage {
	field[2] pkdRecipient
	u32[8] value
	u32[8] salt
}

struct CompressedPoint {
	bool parity
	field ordinate
}

def main(\
	private field fErcAddress,\
	private OldCommitmentPreimage oldCommitment,\
	private NewCommitmentPreimage newCommitment,\
	field fNewCommitmentHash,\
	private u32[8] nsk,\
	field fNullifier,\
	field root,\
	private field[32] path,\
	private field order,\
	private u32[8] ephemeralKey,\
	CompressedPoint compressedEphemeralPublicKey,\
	field[4] cipherText\
)->():

	field u = fErcAddress + fNewCommitmentHash + fNullifier - root
	u32 v = 0x00000000
	bool b = true
	for u32 i in 0..8 do
		v = v + oldCommitment.id[i] +\
			oldCommitment.value[i] +\
			oldCommitment.salt[i] +\
			oldCommitment.hash[i] +\
			newCommitment.value[i] +\
			newCommitment.salt[i] +\
			ephemeralKey[i] +\
			nsk[i]
	endfor

	b = b && compressedEphemeralPublicKey.parity

	field w = 0
	for u32 i in 0..4 do
		w = w + cipherText[i]
	endfor

	for u32 i in 0..32 do
		u = u * path[i]
	endfor

	u = u * order * oldCommitment.ask * newCommitment.pkdRecipient[0] * newCommitment.pkdRecipient[1]
	assert(v == v)
	assert(u == u)
	assert(w == w)
	assert(b == b)

	return
